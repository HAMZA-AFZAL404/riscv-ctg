RWX_reserved_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0CD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
RWX_reserved_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0CD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
RWX_reserved_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0CD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
RWX_reserved_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0CD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
RWX_reserved_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0DD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
RWX_reserved_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0DD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
RWX_reserved_13:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_14:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0DD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
RWX_reserved_15:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
RWX_reserved_16:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0DD)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
datasets:
  all_fregs:
    f0: 0
    f1: 0
    f10: 0
    f11: 0
    f12: 0
    f13: 0
    f14: 0
    f15: 0
    f16: 0
    f17: 0
    f18: 0
    f19: 0
    f2: 0
    f20: 0
    f21: 0
    f22: 0
    f23: 0
    f24: 0
    f25: 0
    f26: 0
    f27: 0
    f28: 0
    f29: 0
    f3: 0
    f30: 0
    f31: 0
    f4: 0
    f5: 0
    f6: 0
    f7: 0
    f8: 0
    f9: 0
  all_regs:
    x0: 0
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x2: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  all_regs_mx0:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x2: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  all_regs_mx2:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  base_rs1val_sgn:
    rs1_val == (-2**(xlen-1)): 0
    rs1_val == (2**(xlen-1)-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  base_rs1val_unsgn:
    rs1_val == (2**(xlen)-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  base_rs2val_sgn:
    rs2_val == (-2**(xlen-1)): 0
    rs2_val == (2**(xlen-1)-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  base_rs2val_unsgn:
    rs2_val == (2**(xlen)-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  base_rs3val_sgn:
    rs3_val == (-2**(xlen-1)): 0
    rs3_val == (2**(xlen-1)-1): 0
    rs3_val == 0: 0
    rs3_val == 1: 0
  base_rs3val_unsgn:
    rs3_val == (2**(xlen)-1): 0
    rs3_val == 0: 0
    rs3_val == 1: 0
  bfmt_base_branch_val_align_sgn:
    rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
  bfmt_base_branch_val_align_unsgn:
    rs1_val > 0 and rs2_val > 0: 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val < 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val > 0 ': 0
    rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val < 0: 0
    rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val > 0: 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val < 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val > 0 ': 0
  c_regs:
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x8: 0
    x9: 0
  cbfmt_immval_sgn:
    imm_val == (-2**(6-1)): 0
    imm_val == (2**(6-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  cbimm_val_walking:
    alternate("imm_val",6): 0
    walking_ones("imm_val", 6): 0
    walking_zeros("imm_val", 6): 0
  crfmt_val_comb_sgn:
    rs2_val < 0: 0
    rs2_val > 0: 0
  ifmt_base_immval_sgn:
    imm_val == (-2**(12-1)): 0
    imm_val == (2**(12-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_sgn_len:
    imm_val == (-2**(ceil(log(xlen,2))-1)): 0
    imm_val == (2**(ceil(log(xlen,2))-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_unsgn:
    imm_val == (2**(12)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_unsgn_len_sub_3:
    imm_val == (2**(ceil(log(xlen,2))-3)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_shift:
    rs1_val < 0 and imm_val == (xlen-1): 0
    rs1_val < 0 and imm_val == 0: 0
    rs1_val < 0 and imm_val > 0 and imm_val < xlen: 0
    rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == 0 and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == 1 and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == imm_val and imm_val > 0 and imm_val < xlen: 0
    rs1_val > 0 and imm_val == (xlen-1): 0
    rs1_val > 0 and imm_val == 0: 0
    rs1_val > 0 and imm_val > 0 and imm_val < xlen: 0
  ifmt_base_shift_32w:
    rs1_val < 0 and imm_val == 0: 0
    rs1_val < 0 and imm_val == 31: 0
    rs1_val < 0 and imm_val > 0 and imm_val < 32: 0
    rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < 32: 0
    rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < 32: 0
    rs1_val == 0 and imm_val >= 0 and imm_val < 32: 0
    rs1_val == 1 and imm_val >= 0 and imm_val < 32: 0
    rs1_val == imm_val and imm_val > 0 and imm_val < 32: 0
    rs1_val > 0 and imm_val == 0: 0
    rs1_val > 0 and imm_val == 31: 0
    rs1_val > 0 and imm_val > 0 and imm_val < 32: 0
  ifmt_immval_walking:
    alternate("imm_val",12): 0
    walking_ones("imm_val", 12): 0
    walking_zeros("imm_val", 12): 0
  ifmt_immval_walking_5u:
    alternate("imm_val", 5, False): 0
    walking_ones("imm_val", 5, False): 0
    walking_zeros("imm_val", 5, False): 0
  ifmt_immval_walking_len:
    alternate("imm_val",ceil(log(xlen,2)), False): 0
    walking_ones("imm_val", ceil(log(xlen,2)), False): 0
    walking_zeros("imm_val", ceil(log(xlen,2)), False): 0
  ifmt_immval_walking_len_sub_3:
    alternate("imm_val", ceil(log(xlen,2))-3, False): 0
    walking_ones("imm_val", ceil(log(xlen,2))-3, False): 0
    walking_zeros("imm_val", ceil(log(xlen,2))-3, False): 0
  ifmt_immval_walking_unsgn:
    alternate("imm_val",12,False): 0
    walking_ones("imm_val", 12,False): 0
    walking_zeros("imm_val", 12,False): 0
  ifmt_op_comb:
    rs1 != rd: 0
    rs1 == rd: 0
  ifmt_val_comb_sgn:
    rs1_val != imm_val: 0
    rs1_val < 0 and imm_val < 0: 0
    rs1_val < 0 and imm_val > 0: 0
    rs1_val == imm_val: 0
    rs1_val > 0 and imm_val < 0: 0
    rs1_val > 0 and imm_val > 0: 0
  ifmt_val_comb_unsgn:
    rs1_val != imm_val and rs1_val > 0 and imm_val > 0: 0
    rs1_val == imm_val and rs1_val > 0 and imm_val > 0: 0
  pair_regs:
    x10: 0
    x12: 0
    x14: 0
    x16: 0
    x18: 0
    x2: 0
    x20: 0
    x22: 0
    x24: 0
    x26: 0
    x28: 0
    x30: 0
    x4: 0
    x6: 0
    x8: 0
  r4fmt_op_comb:
    rd == rs2 == rs3 != rs1: 0
    rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd: 0
    rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2: 0
    rs1 == rd == rs3 != rs2: 0
    rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3: 0
    rs1 == rs2 == rd != rs3: 0
    rs1 == rs2 == rs3 != rd: 0
    rs1 == rs2 == rs3 == rd: 0
    rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2: 0
    rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1: 0
    rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1: 0
    rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1: 0
  rfmt_base_shift:
    rs1_val < 0 and rs2_val == 0: 0
    rs1_val < 0 and rs2_val > 0 and rs2_val < xlen: 0
    rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen: 0
    rs1_val > 0 and rs2_val == 0: 0
    rs1_val > 0 and rs2_val > 0 and rs2_val < xlen: 0
  rfmt_op_comb:
    rs1 != rs2  and rs1 != rd and rs2 != rd: 0
    rs1 == rd != rs2: 0
    rs1 == rs2 != rd: 0
    rs1 == rs2 == rd: 0
    rs2 == rd != rs1: 0
  rfmt_val_comb_sgn:
    rs1_val != rs2_val: 0
    rs1_val < 0 and rs2_val < 0: 0
    rs1_val < 0 and rs2_val > 0: 0
    rs1_val == rs2_val: 0
    rs1_val > 0 and rs2_val < 0: 0
    rs1_val > 0 and rs2_val > 0: 0
  rfmt_val_comb_unsgn:
    rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0: 0
    rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0: 0
    rs1_val > 0 and rs2_val > 0: 0
  rs1val_walking:
    alternate("rs1_val",xlen): 0
    walking_ones("rs1_val", xlen): 0
    walking_zeros("rs1_val", xlen): 0
  rs1val_walking_unsgn:
    alternate("rs1_val",xlen,False): 0
    walking_ones("rs1_val", xlen,False): 0
    walking_zeros("rs1_val", xlen,False): 0
  rs2val_walking:
    alternate("rs2_val",xlen): 0
    walking_ones("rs2_val", xlen): 0
    walking_zeros("rs2_val", xlen): 0
  rs2val_walking_unsgn:
    alternate("rs2_val",xlen,False): 0
    walking_ones("rs2_val", xlen,False): 0
    walking_zeros("rs2_val", xlen,False): 0
  rs3val_walking:
    alternate("rs3_val",xlen): 0
    walking_ones("rs3_val", xlen): 0
    walking_zeros("rs3_val", xlen): 0
  rv32e_regs:
    x0: 0
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rv32e_regs_mx0:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rv32e_regs_mx2:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rvp64_rs1val_sgn:
    rs1_val == (-2**63): 0
    rs1_val == (2**63-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  rvp64_rs1val_unsgn:
    rs1_val == (2**64-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  rvp64_rs1val_walking_sgn:
    alternate("rs1_val",64): 0
    walking_ones("rs1_val", 64): 0
    walking_zeros("rs1_val", 64): 0
  rvp64_rs1val_walking_unsgn:
    alternate("rs1_val",64, signed=False): 0
    walking_ones("rs1_val", 64, signed=False): 0
    walking_zeros("rs1_val", 64, signed=False): 0
  rvp64_rs2val_sgn:
    rs2_val == (-2**63): 0
    rs2_val == (2**63-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  rvp64_rs2val_unsgn:
    rs2_val == (2**64-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  rvp64_rs2val_walking_sgn:
    alternate("rs2_val",64): 0
    walking_ones("rs2_val", 64): 0
    walking_zeros("rs2_val", 64): 0
  rvp64_rs2val_walking_unsgn:
    alternate("rs2_val",64, signed=False): 0
    walking_ones("rs2_val", 64, signed=False): 0
    walking_zeros("rs2_val", 64, signed=False): 0
  sfmt_op_comb:
    rs1 != rs2: 0
    rs1 == rs2: 0
dirty_bit_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 12
    coverage: 2/2
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 56
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x047)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 12
    coverage: 2/2
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 55
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x047)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 12
    coverage: 2/2
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 54
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x047)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 12
    coverage: 2/2
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 53
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x047)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 18
    (satp >> 60) == 0x9: 11
    coverage: 2/2
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 60
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x057)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 18
    (satp >> 60) == 0x9: 11
    coverage: 2/2
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 59
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x057)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 18
    (satp >> 60) == 0x9: 11
    coverage: 2/2
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 58
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x057)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 18
    (satp >> 60) == 0x9: 11
    coverage: 2/2
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 57
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x057)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_13:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_14:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_pte_15:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_pte_16:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0x0FF) == 0x0C7) and (((rs2_val & 0X7FC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0x0FF) == 0x0C9) and (((rs2_val & 0X7FC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0x0FF) == 0x0C7) and (((rs2_val & 0XFFFFC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0x0FF) == 0x0C9) and (((rs2_val & 0XFFFFC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000009) and ((rs2_val & 0x0FF) == 0x0C7) and (((rs2_val & 0X1FFFFFFC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000009) and ((rs2_val & 0x0FF) == 0x0C9) and (((rs2_val & 0X1FFFFFFC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0x0FF) == 0x0D7) and (((rs2_val & 0X7FC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0x0FF) == 0xD9) and (((rs2_val & 0X7FC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0x0FF) == 0x0D7) and (((rs2_val & 0XFFFFC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0x0FF) == 0x0D9) and (((rs2_val & 0XFFFFC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000009) and ((rs2_val & 0x0FF) == 0x0D7) and (((rs2_val & 0X1FFFFFFC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000009) and ((rs2_val & 0x0FF) == 0x0D9) and (((rs2_val & 0X1FFFFFFC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
mxr_set_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 43
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val != 0xC): 43
    (rs2_val != 0xD): 43
    (rs2_val != 0xF): 43
    coverage: 4/4
  total_coverage: 10/10
mxr_set_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 42
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val != 0xC): 42
    (rs2_val != 0xD): 42
    (rs2_val != 0xF): 42
    coverage: 4/4
  total_coverage: 10/10
mxr_set_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 41
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val != 0xC): 41
    (rs2_val != 0xD): 41
    (rs2_val != 0xF): 41
    coverage: 4/4
  total_coverage: 10/10
mxr_set_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 40
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val != 0xC): 40
    (rs2_val != 0xD): 40
    (rs2_val != 0xF): 40
    coverage: 4/4
  total_coverage: 10/10
mxr_set_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 15
    (mstatus & 0x80000) == 0x80000: 12
    (satp >> 60) == 0x9: 8
    coverage: 3/3
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 47
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val != 0xC): 47
    (rs2_val != 0xD): 47
    (rs2_val != 0xF): 47
    coverage: 4/4
  total_coverage: 10/10
mxr_set_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 15
    (mstatus & 0x80000) == 0x80000: 12
    (satp >> 60) == 0x9: 8
    coverage: 3/3
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 46
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val != 0xC): 46
    (rs2_val != 0xD): 46
    (rs2_val != 0xF): 46
    coverage: 4/4
  total_coverage: 10/10
mxr_set_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 15
    (mstatus & 0x80000) == 0x80000: 12
    (satp >> 60) == 0x9: 8
    coverage: 3/3
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 45
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val != 0xC): 45
    (rs2_val != 0xD): 45
    (rs2_val != 0xF): 45
    coverage: 4/4
  total_coverage: 10/10
mxr_set_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 15
    (mstatus & 0x80000) == 0x80000: 12
    (satp >> 60) == 0x9: 8
    coverage: 3/3
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 44
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val != 0xC): 44
    (rs2_val != 0xD): 44
    (rs2_val != 0xF): 44
    coverage: 4/4
  total_coverage: 10/10
mxr_unset_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x00000: 26
    (satp >> 60) == 0x9: 11
    coverage: 3/3
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 55
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
mxr_unset_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x00000: 26
    (satp >> 60) == 0x9: 11
    coverage: 3/3
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 54
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
mxr_unset_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x00000: 26
    (satp >> 60) == 0x9: 11
    coverage: 3/3
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 53
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
mxr_unset_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x00000: 26
    (satp >> 60) == 0x9: 11
    coverage: 3/3
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 52
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
mxr_unset_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 17
    (mstatus & 0x80000) == 0x00000: 25
    (satp >> 60) == 0x9: 10
    coverage: 3/3
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 59
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
mxr_unset_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 17
    (mstatus & 0x80000) == 0x00000: 25
    (satp >> 60) == 0x9: 10
    coverage: 3/3
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 58
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
mxr_unset_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 17
    (mstatus & 0x80000) == 0x00000: 25
    (satp >> 60) == 0x9: 10
    coverage: 3/3
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 57
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
mxr_unset_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 17
    (mstatus & 0x80000) == 0x00000: 25
    (satp >> 60) == 0x9: 10
    coverage: 3/3
  mnemonics:
    csrrs: 19
    csrrw: 25
    sd: 56
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 8/8
non_leaf_pte_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
non_leaf_pte_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
non_leaf_pte_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
non_leaf_pte_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
non_leaf_pte_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
non_leaf_pte_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
non_leaf_pte_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
non_leaf_pte_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
non_leaf_pte_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
non_leaf_pte_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
non_leaf_pte_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
non_leaf_pte_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pmp_pa_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 30
    csrrw: 31
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 52
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 49
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 121
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pa_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 30
    csrrw: 31
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 51
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 49
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 120
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pa_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 30
    csrrw: 31
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 50
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 49
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 119
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pa_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 30
    csrrw: 31
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 49
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 49
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 118
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pa_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 29
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 29
    csrrw: 31
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 56
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 49
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 49
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 125
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pa_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 29
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 29
    csrrw: 31
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 55
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 49
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 49
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 124
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pa_13:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 29
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 29
    csrrw: 31
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 54
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_14:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 49
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 49
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 123
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pa_15:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 29
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 29
    csrrw: 31
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 53
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pa_16:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 49
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 49
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000008) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr0 << 2)) and ((pmpcfg0 & 0xFF) == 0x18): 122
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 33
    csrrw: 34
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and (rs1_val <= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 62
    csrrw: 49
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 39
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 33
    csrrw: 35
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and (rs1_val <= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 62
    csrrw: 50
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 39
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 33
    csrrw: 34
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr1 << 2)) and (rs1_val <= (pmpaddr1 << 2)) and ((pmpcfg0 & 0xFF00) >> 8 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 62
    csrrw: 50
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr1 << 2)) and ((pmpcfg0 & 0xFF00) >> 8 == 0x18): 40
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 33
    csrrw: 34
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000008) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr4 << 2)) and (rs1_val <= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 62
    csrrw: 50
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000008) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 36
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 35
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 32
    csrrw: 34
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and (rs1_val <= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 56
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 61
    csrrw: 49
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 39
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 36
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 32
    csrrw: 35
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and (rs1_val <= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 57
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 61
    csrrw: 50
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 39
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_13:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 35
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 32
    csrrw: 34
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr1 << 2)) and (rs1_val <= (pmpaddr1 << 2)) and ((pmpcfg0 & 0xFF00) >> 8 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_14:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 57
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 61
    csrrw: 50
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr1 << 2)) and ((pmpcfg0 & 0xFF00) >> 8 == 0x18): 40
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte_15:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 35
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 32
    csrrw: 34
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000008) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr4 << 2)) and (rs1_val <= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte_16:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 57
    (satp >> 60) == 0x9 and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 61
    csrrw: 50
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000008) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 36
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_access_bit_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_access_bit_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_access_bit_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_access_bit_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_access_bit_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_access_bit_13:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_14:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_access_bit_15:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_access_bit_16:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_sum_set_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 44
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xD): 44
    (rs2_val != 0xF): 44
    coverage: 3/3
  total_coverage: 9/9
pte_sum_set_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 36
    (satp >> 60) == 0x9: 32
    coverage: 3/3
  mnemonics:
    csrrs: 56
    csrrw: 45
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_sum_set_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 43
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xD): 43
    (rs2_val != 0xF): 43
    coverage: 3/3
  total_coverage: 9/9
pte_sum_set_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 36
    (satp >> 60) == 0x9: 32
    coverage: 3/3
  mnemonics:
    csrrs: 56
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_sum_set_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 42
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xD): 42
    (rs2_val != 0xF): 42
    coverage: 3/3
  total_coverage: 9/9
pte_sum_set_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 36
    (satp >> 60) == 0x9: 32
    coverage: 3/3
  mnemonics:
    csrrs: 56
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_sum_set_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 13
    (satp >> 60) == 0x9: 9
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 41
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xD): 41
    (rs2_val != 0xF): 41
    coverage: 3/3
  total_coverage: 9/9
pte_sum_set_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 36
    (satp >> 60) == 0x9: 32
    coverage: 3/3
  mnemonics:
    csrrs: 56
    csrrw: 45
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_sum_unset_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 30
    (satp >> 60) == 0x9: 15
    coverage: 3/3
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
pte_sum_unset_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 46
    (satp >> 60) == 0x9: 31
    coverage: 3/3
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_sum_unset_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 30
    (satp >> 60) == 0x9: 15
    coverage: 3/3
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
pte_sum_unset_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 46
    (satp >> 60) == 0x9: 31
    coverage: 3/3
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_sum_unset_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 30
    (satp >> 60) == 0x9: 15
    coverage: 3/3
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
pte_sum_unset_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 46
    (satp >> 60) == 0x9: 31
    coverage: 3/3
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_sum_unset_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 30
    (satp >> 60) == 0x9: 15
    coverage: 3/3
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
pte_sum_unset_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x00000: 46
    (satp >> 60) == 0x9: 31
    coverage: 3/3
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pte_u_bit_set_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 14
    (satp >> 60) == 0x9: 7
    coverage: 2/2
  mnemonics:
    csrrs: 14
    csrrw: 22
    sd: 48
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xC): 48
    (rs2_val != 0xD): 48
    (rs2_val != 0xF): 48
    coverage: 4/4
  total_coverage: 9/9
pte_u_bit_set_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 14
    (satp >> 60) == 0x9: 7
    coverage: 2/2
  mnemonics:
    csrrs: 14
    csrrw: 22
    sd: 47
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xC): 47
    (rs2_val != 0xD): 47
    (rs2_val != 0xF): 47
    coverage: 4/4
  total_coverage: 9/9
pte_u_bit_set_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 14
    (satp >> 60) == 0x9: 7
    coverage: 2/2
  mnemonics:
    csrrs: 14
    csrrw: 22
    sd: 46
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xC): 46
    (rs2_val != 0xD): 46
    (rs2_val != 0xF): 46
    coverage: 4/4
  total_coverage: 9/9
pte_u_bit_set_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 14
    (satp >> 60) == 0x9: 7
    coverage: 2/2
  mnemonics:
    csrrs: 14
    csrrw: 22
    sd: 45
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xC): 45
    (rs2_val != 0xD): 45
    (rs2_val != 0xF): 45
    coverage: 4/4
  total_coverage: 9/9
pte_u_bit_set_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_u_bit_set_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_u_bit_set_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 71
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_u_bit_set_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_u_bit_set_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_u_bit_set_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_u_bit_set_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_u_bit_set_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_u_bit_unset_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 72
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_u_bit_unset_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 138
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_u_bit_unset_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xD): 0
    (rs2_val == 0xF): 0
    coverage: 1/3
  total_coverage: 6/8
pte_u_bit_unset_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 137
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_u_bit_unset_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 70
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_u_bit_unset_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 136
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
pte_u_bit_unset_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 21
    (satp >> 60) == 0x9: 14
    coverage: 2/2
  mnemonics:
    csrrs: 24
    csrrw: 28
    sd: 69
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
pte_u_bit_unset_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000: 45
    (satp >> 60) == 0x9: 30
    coverage: 2/2
  mnemonics:
    csrrs: 54
    csrrw: 45
    sd: 135
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C9)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
rwx_access_01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 8
    coverage: 2/2
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 44
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val != 0xC): 44
    (rs2_val != 0xD): 44
    (rs2_val != 0xF): 44
    coverage: 4/4
  total_coverage: 9/9
rwx_access_02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 8
    coverage: 2/2
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 43
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val != 0xC): 43
    (rs2_val != 0xD): 43
    (rs2_val != 0xF): 43
    coverage: 4/4
  total_coverage: 9/9
rwx_access_03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 8
    coverage: 2/2
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 42
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val != 0xC): 42
    (rs2_val != 0xD): 42
    (rs2_val != 0xF): 42
    coverage: 4/4
  total_coverage: 9/9
rwx_access_04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 8
    coverage: 2/2
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 41
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val != 0xC): 41
    (rs2_val != 0xD): 41
    (rs2_val != 0xF): 41
    coverage: 4/4
  total_coverage: 9/9
rwx_access_05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 68
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
rwx_access_06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 134
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
rwx_access_07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 67
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
rwx_access_08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 133
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
rwx_access_09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 66
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
rwx_access_10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 132
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
rwx_access_11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 15
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 65
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
rwx_access_12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800) == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60) == 0x9: 31
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 131
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
